// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaclientmx.actions;

import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.stack.core.UaException;
import org.eclipse.milo.opcua.stack.core.types.builtin.NodeId;
import org.eclipse.milo.opcua.stack.core.types.builtin.StatusCode;
import org.eclipse.milo.opcua.stack.core.types.builtin.Variant;
import org.eclipse.milo.opcua.stack.core.types.structured.CallMethodRequest;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import opcuaclientmx.impl.OpcUaClientManager;
import java.util.concurrent.CompletableFuture;

public class OpcUaMethod extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __OpcUaServerCfg;
	private opcuaclientmx.proxies.OpcUaServerCfg OpcUaServerCfg;
	private java.lang.String objectId;
	private java.lang.String methodId;
	private java.lang.String input;

	public OpcUaMethod(IContext context, IMendixObject OpcUaServerCfg, java.lang.String objectId, java.lang.String methodId, java.lang.String input)
	{
		super(context);
		this.__OpcUaServerCfg = OpcUaServerCfg;
		this.objectId = objectId;
		this.methodId = methodId;
		this.input = input;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.OpcUaServerCfg = this.__OpcUaServerCfg == null ? null : opcuaclientmx.proxies.OpcUaServerCfg.initialize(getContext(), __OpcUaServerCfg);

		// BEGIN USER CODE
                OpcUaClient client = OpcUaClientManager.retrieve(this.context(), this.OpcUaServerCfg);
                logger.info(String.format("[Method] Invoking method [Server:%s|ObjectId:%s|MethodId:%s]", this.OpcUaServerCfg.getServerID(), this.objectId, this.methodId));
                
                NodeId nodeIdObject;
                NodeId nodeIdMethod;
                try {
                        nodeIdObject = NodeId.parse(this.objectId);
                        nodeIdMethod = NodeId.parse(this.methodId);
                } catch (Exception e) {
                        throw new CoreException("Unable to parse ObjectId or MethodId, check if they are correct", e);
                }
                
                
                CallMethodRequest request = new CallMethodRequest(
                    nodeIdObject,
                    nodeIdMethod,
                    new Variant[]{new Variant(Integer.parseInt(this.input))}
                );

                CompletableFuture<java.lang.String> fResult = client.call(request).thenCompose(result -> {
                        StatusCode statusCode = result.getStatusCode();
                        if (statusCode.isGood()) {
                                Integer output = (Integer) result.getOutputArguments()[0].getValue();
                                logger.info(String.format("[Method] Response from [Server:%s|ObjectId:%s|MethodId:%s]; Result: %s", this.OpcUaServerCfg.getServerID(), this.objectId, this.methodId, output));
                                return CompletableFuture.completedFuture(output.toString());
                        } else {    
                                logger.error(String.format("Method call failed: %s", statusCode.toString()));
                                CompletableFuture<java.lang.String> f = new CompletableFuture<>();
                                f.completeExceptionally(new UaException(statusCode));
                                return f;
                        }
                });

                try {
                        return fResult.get();
                } catch (Exception e) {
                        throw new CoreException("Error invoking method on the OPC UA server: " + e.getMessage(), e);
                }
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "OpcUaMethod";
	}

	// BEGIN EXTRA CODE
        private static final ILogNode logger = Core.getLogger("OpcUA");
	// END EXTRA CODE
}
